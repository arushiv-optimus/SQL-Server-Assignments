//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrystalReportDemo
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Collections.Generic;

    public partial class TeekayTrainingEntities : DbContext
    {
        public TeekayTrainingEntities()
            : base("name=TeekayTrainingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Emp_Salary> Emp_Salary { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Employee1> Employees1 { get; set; }
        public virtual DbSet<MyEmployee> MyEmployees { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<EmployeesDetalsView> EmployeesDetalsViews { get; set; }
    
        public virtual int CreateCustomers(string custName, string contactNumber, string address, string city, string country)
        {
            var custNameParameter = custName != null ?
                new ObjectParameter("custName", custName) :
                new ObjectParameter("custName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCustomers", custNameParameter, contactNumberParameter, addressParameter, cityParameter, countryParameter);
        }
    
        public virtual int CreateOrders(Nullable<int> customerID, Nullable<int> employeeId, Nullable<System.DateTime> orderDate, Nullable<int> shipperID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("employeeId", employeeId) :
                new ObjectParameter("employeeId", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("orderDate", orderDate) :
                new ObjectParameter("orderDate", typeof(System.DateTime));
    
            var shipperIDParameter = shipperID.HasValue ?
                new ObjectParameter("shipperID", shipperID) :
                new ObjectParameter("shipperID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateOrders", customerIDParameter, employeeIdParameter, orderDateParameter, shipperIDParameter);
        }
    
        public virtual int CreatePersons(string lastName, string firstName, string address, string city)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePersons", lastNameParameter, firstNameParameter, addressParameter, cityParameter);
        }
    
        public virtual int CreateProducts(string productName, Nullable<decimal> unitPrice, Nullable<int> unitsInStock, Nullable<int> unitsOnOrder)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("unitPrice", unitPrice) :
                new ObjectParameter("unitPrice", typeof(decimal));
    
            var unitsInStockParameter = unitsInStock.HasValue ?
                new ObjectParameter("unitsInStock", unitsInStock) :
                new ObjectParameter("unitsInStock", typeof(int));
    
            var unitsOnOrderParameter = unitsOnOrder.HasValue ?
                new ObjectParameter("unitsOnOrder", unitsOnOrder) :
                new ObjectParameter("unitsOnOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateProducts", productNameParameter, unitPriceParameter, unitsInStockParameter, unitsOnOrderParameter);
        }
    
        public virtual int CreateSuppliers(string supplierName, string contactNumber, string address, string city, string country)
        {
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("supplierName", supplierName) :
                new ObjectParameter("supplierName", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("contactNumber", contactNumber) :
                new ObjectParameter("contactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateSuppliers", supplierNameParameter, contactNumberParameter, addressParameter, cityParameter, countryParameter);
        }
    
        public virtual ObjectResult<EmployeeDeatils_Result> EmployeeDeatils(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeDeatils_Result>("EmployeeDeatils", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetErrorInfo_Result> GetErrorInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetErrorInfo_Result>("GetErrorInfo");
        }
    
        public virtual ObjectResult<SelectAllEmployee_Result> SelectAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllEmployee_Result>("SelectAllEmployee");
        }
    
        public virtual ObjectResult<Employee1> GetEmployeeReport(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee1>("GetEmployeeReport", employeeIdParameter);
        }
    
        public virtual ObjectResult<Employee1> GetEmployeeReport(Nullable<int> employeeId, MergeOption mergeOption)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Employee1>("GetEmployeeReport", mergeOption, employeeIdParameter);
        }
    }
}
